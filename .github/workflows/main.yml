name: Python Build, Compile, and Release

on:
  push:
    branches:
      - main  # Trigger the workflow when code is pushed to the main branch
  pull_request:
    branches:
      - main  # Trigger the workflow on pull requests targeting the main branch

jobs:
  build:
    runs-on: ubuntu-latest  # Using Ubuntu as the OS

    steps:
    # Step 1: Checkout the repository code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'  # Use Python 3.x (can specify specific version like 3.9)

    # Step 3: Install dependencies (if any in requirements.txt)
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    # Step 4: Lint the code with flake8 (Optional)
    - name: Lint with flake8
      run: |
        pip install flake8
        flake8 .

    # Step 5: Run unit tests with pytest (if you have tests)
    - name: Run tests
      run: |
        pip install pytest
        pytest

    # Step 6: Compile Python to standalone binary using PyInstaller
    - name: Compile to binary with PyInstaller
      run: |
        pip install pyinstaller
        pyinstaller --onefile your_script.py  # Replace 'your_script.py' with your actual Python script filename

    # Step 7: Upload the compiled binary as an artifact (Optional, for debugging)
    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: python-gui-hash-verifier  # Name of the artifact
        path: dist/  # Path to the compiled binary (PyInstaller outputs to 'dist/' folder by default)

  release:
    runs-on: ubuntu-latest
    needs: build  # This step depends on the build job completing successfully

    steps:
    # Step 8: Checkout the repository code again for the release job
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 9: Create a GitHub release
    - name: Create Release
      id: create_release
      uses: ncipollo/release-action@v1
      with:
        tag: v1.0.0  # You can automate or update the versioning here
        name: Release v1.0.0  # Name of the release
        commit: ${{ github.sha }}  # Use the latest commit hash
        draft: false
        prerelease: false

    # Step 10: Upload the compiled binary to the GitHub release
    - name: Upload Release Binary
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}  # Upload URL from the release
        asset_path: dist/your_script  # Path to the compiled binary (replace with actual file path)
        asset_name: your_script  # Name of the binary to show in the release (replace with actual binary name)
        asset_content_type: application/octet-stream
